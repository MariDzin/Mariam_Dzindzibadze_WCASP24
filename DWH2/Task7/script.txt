-- Creating necessary schemas
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_namespace WHERE nspname = 'BL_CL') THEN
        EXECUTE 'CREATE SCHEMA BL_CL';
    END IF;
END
$$;


-- Creating necessary sequences with schema prefixes
CREATE SEQUENCE IF NOT EXISTS BL_3NF.dealsize_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.payment_method_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.product_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.country_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.state_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.city_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.address_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.customer_id_seq;
CREATE SEQUENCE IF NOT EXISTS BL_3NF.ordernumber_seq;


-- Creating a centralized logging table in BL_CL schema
CREATE TABLE IF NOT EXISTS BL_CL.procedure_logs (
    log_id SERIAL PRIMARY KEY,
    log_timestamp TIMESTAMPTZ DEFAULT NOW(),
    procedure_name TEXT,
    rows_affected INT,
    log_message TEXT,
    error_message TEXT  -- Added this for logging errors 
);




-- Creating a logging function in BL_CL schema
CREATE OR REPLACE FUNCTION BL_CL.log_procedure_action(
    proc_name TEXT, 
    rows INT, 
    message TEXT, 
    error_message TEXT DEFAULT NULL
) RETURNS VOID AS $$
BEGIN
    INSERT INTO BL_CL.procedure_logs (procedure_name, rows_affected, log_message, error_message)
    VALUES (proc_name, rows, message, error_message);
END;
$$ LANGUAGE plpgsql;




-- Creating procedure to load data into CE_DEALSIZES
CREATE OR REPLACE PROCEDURE BL_3NF.load_dealsizes()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        
        INSERT INTO BL_3NF.CE_DEALSIZES (
            DEALSIZE_ID, DEALSIZE, DEALSIZE_SRC_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.dealsize_id_seq'),
            combined.dealsize,
            combined.dealsize AS dealsize_src_id,
            CURRENT_DATE,
            CURRENT_DATE,
            combined.source_system,
            combined.source_entity
        FROM (
            SELECT 
                dealsize, 
                'sa_us_orders' AS source_system, 
                'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order
            UNION ALL
            SELECT 
                deal_size AS dealsize, 
                'sa_no_usa_orders' AS source_system, 
                'src_no_usa_order' AS source_entity
            FROM sa_no_usa_orders.src_no_usa_order
        ) AS combined
        WHERE combined.dealsize IS NOT NULL 
          AND NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_DEALSIZES 
            WHERE DEALSIZE = combined.dealsize
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_dealsizes', rows_affected, 'Dealsizes loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_dealsizes', 0, 'Error occurred during dealsizes load', SQLERRM);
            RAISE;
    END;
END;
$$;



-- Creating procedure to load data into CE_PAYMENT_METHODS
CREATE OR REPLACE PROCEDURE BL_3NF.load_payment_methods()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
       
        INSERT INTO BL_3NF.CE_PAYMENT_METHODS (
            PAYMENT_METHOD_ID, PAYMENT_METHOD, PAYMENT_SRC_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.payment_method_id_seq'),
            combined.payment_method,
            combined.payment_method AS payment_src_id,
            CURRENT_DATE,
            CURRENT_DATE,
            combined.source_system,
            combined.source_entity
        FROM (
            SELECT 
                payment_method, 
                'sa_us_orders' AS source_system, 
                'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order
            UNION ALL
            SELECT 
                payment_method, 
                'sa_no_usa_orders' AS source_system, 
                'src_no_usa_order' AS source_entity
            FROM sa_no_usa_orders.src_no_usa_order
        ) AS combined
        WHERE combined.payment_method IS NOT NULL  
          AND NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_PAYMENT_METHODS 
            WHERE PAYMENT_METHOD = combined.payment_method
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_payment_methods', rows_affected, 'Payment methods loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_payment_methods', 0, 'Error occurred during payment methods load', SQLERRM);
            RAISE;
    END;
END;
$$;





-- Creating procedure to load data into CE_PRODUCTS
CREATE OR REPLACE PROCEDURE BL_3NF.load_products()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        
        INSERT INTO BL_3NF.CE_PRODUCTS (
            PRODUCT_ID, PRODUCTCODE, PRODUCTLINE, PRICEEACH, MSRP, PRODUCT_SRC_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.product_id_seq'),
            combined.productcode,
            combined.productline,
            combined.priceeach::NUMERIC,
            combined.msrp::NUMERIC,
            combined.productcode AS product_src_id,
            CURRENT_DATE,
            CURRENT_DATE,
            combined.source_system,
            combined.source_entity
        FROM (
            SELECT 
                productcode, 
                productline, 
                priceeach::VARCHAR, 
                msrp::VARCHAR, 
                'sa_us_orders' AS source_system, 
                'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order
            UNION ALL
            SELECT 
                product_model AS productcode, 
                product_line AS productline, 
                price_for_each AS priceeach, 
                ms_rp AS msrp, 
                'sa_no_usa_orders' AS source_system, 
                'src_no_usa_order' AS source_entity
            FROM sa_no_usa_orders.src_no_usa_order
        ) AS combined
        WHERE combined.productcode IS NOT NULL 
          AND NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_PRODUCTS 
            WHERE PRODUCTCODE = combined.productcode
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_products', rows_affected, 'Products loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_products', 0, 'Error occurred during products load', SQLERRM);
            RAISE;
    END;
END;
$$;



-- Creating procedure to load data into CE_COUNTRIES
CREATE OR REPLACE PROCEDURE BL_3NF.load_countries()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        INSERT INTO BL_3NF.CE_COUNTRIES (
            COUNTRY_ID, COUNTRY_NAME, COUNTRY_SRC_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.country_id_seq'),
            country_name,
            country_src_id,
            CURRENT_DATE,
            CURRENT_DATE,
            source_system,
            source_entity
        FROM (
            SELECT COALESCE(country, 'n. a.') AS country_name, COALESCE(country, 'n. a.') AS country_src_id, 'sa_us_orders' AS source_system, 'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order
            UNION ALL
            SELECT COALESCE(country_name, 'n. a.') AS country_name, COALESCE(country_name, 'n. a.') AS country_src_id, 'sa_no_usa_orders' AS source_system, 'src_no_usa_order' AS source_entity
            FROM sa_no_usa_orders.src_no_usa_order
        ) AS combined
        WHERE NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_COUNTRIES 
            WHERE COUNTRY_NAME = combined.country_name
              AND SOURCE_SYSTEM = combined.source_system
              AND SOURCE_ENTITY = combined.source_entity
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_countries', rows_affected, 'Countries loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_countries', 0, 'Error occurred during countries load', SQLERRM);
            RAISE;
    END;
END;
$$;



-- Creating procedure to load data into CE_STATES
CREATE OR REPLACE PROCEDURE BL_3NF.load_states()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        INSERT INTO BL_3NF.CE_STATES (
            STATE_ID, STATE_NAME, STATE_SRC_ID, COUNTRY_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.state_id_seq'),
            state_name,
            state_src_id,
            country_id,
            CURRENT_DATE,
            CURRENT_DATE,
            source_system,
            source_entity
        FROM (
            SELECT us.state AS state_name, COALESCE(us.state, 'n. a.') AS state_src_id, COALESCE(c.country_id, -1) AS country_id, 'sa_us_orders' AS source_system, 'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order us
            LEFT JOIN BL_3NF.CE_COUNTRIES c
            ON us.country = c.country_src_id
            AND c.source_system = 'sa_us_orders'
            AND c.source_entity = 'src_us_order'
        ) AS combined
        WHERE NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_STATES 
            WHERE STATE_NAME = combined.state_name
              AND SOURCE_SYSTEM = combined.source_system
              AND SOURCE_ENTITY = combined.source_entity
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_states', rows_affected, 'States loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_states', 0, 'Error occurred during states load', SQLERRM);
            RAISE;
    END;
END;
$$;



-- Creating procedure to load data into CE_CITIES
CREATE OR REPLACE PROCEDURE BL_3NF.load_cities()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        INSERT INTO BL_3NF.CE_CITIES (
            CITY_ID, CITY_NAME, CITY_SRC_ID, STATE_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.city_id_seq'),
            city_name,
            city_src_id,
            state_id,
            CURRENT_DATE,
            CURRENT_DATE,
            source_system,
            source_entity
        FROM (
            SELECT us.city AS city_name, COALESCE(us.city, 'n. a.') AS city_src_id, COALESCE(s.state_id, -1) AS state_id, 'sa_us_orders' AS source_system, 'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order us
            LEFT JOIN BL_3NF.CE_STATES s 
            ON us.state = s.state_name
            AND s.source_system = 'sa_us_orders'
            AND s.source_entity = 'src_us_order'
            UNION ALL
            SELECT nous.city_name AS city_name, COALESCE(nous.city_name, 'n. a.') AS city_src_id, -1 AS state_id, 'sa_no_usa_orders' AS source_system, 'src_no_usa_order' AS source_entity
            FROM sa_no_usa_orders.src_no_usa_order nous
        ) AS combined
        WHERE NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_CITIES 
            WHERE CITY_NAME = combined.city_name
              AND SOURCE_SYSTEM = combined.source_system
              AND SOURCE_ENTITY = combined.source_entity
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_cities', rows_affected, 'Cities loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_cities', 0, 'Error occurred during cities load', SQLERRM);
            RAISE;
    END;
END;
$$;



-- Creating procedure to load data into CE_ADDRESSES
CREATE OR REPLACE PROCEDURE BL_3NF.load_addresses()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        INSERT INTO BL_3NF.CE_ADDRESSES (
            ADDRESS_ID, ADDRESSLINE1, ADDRESS_SRC_ID, CITY_ID, TA_INSERT_DT, TA_UPDATE_DT, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            nextval('BL_3NF.address_id_seq'),
            addressline1,
            address_src_id,
            city_id,
            CURRENT_DATE,
            CURRENT_DATE,
            source_system,
            source_entity
        FROM (
            SELECT COALESCE(us.addressline1, 'n. a.') AS addressline1, COALESCE(us.address_id::VARCHAR, 'n. a.') AS address_src_id, COALESCE(c.city_id, -1) AS city_id, 'sa_us_orders' AS source_system, 'src_us_order' AS source_entity
            FROM sa_us_orders.src_us_order us
            LEFT JOIN BL_3NF.CE_CITIES c 
            ON us.city = c.city_name
            AND c.source_system = 'sa_us_orders'
            AND c.source_entity = 'src_us_order'
            UNION ALL
            SELECT COALESCE(nous.address_line, 'n. a.') AS addressline1, COALESCE(nous.address_id_num::VARCHAR, 'n. a.') AS address_src_id, COALESCE(c.city_id, -1) AS city_id, 'sa_no_usa_orders' AS source_system, 'src_no_usa_order' AS source_entity
            FROM sa_no_usa_orders.src_no_usa_order nous
            LEFT JOIN BL_3NF.CE_CITIES c 
            ON nous.city_name = c.city_name
            AND c.source_system = 'sa_no_usa_orders'
            AND c.source_entity = 'src_no_usa_order'
        ) AS combined
        WHERE NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_ADDRESSES 
            WHERE ADDRESSLINE1 = combined.addressline1
              AND SOURCE_SYSTEM = combined.source_system
              AND SOURCE_ENTITY = combined.source_entity
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_addresses', rows_affected, 'Addresses loaded successfully');
    EXCEPTION
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_addresses', 0, 'Error occurred during addresses load', SQLERRM);
            RAISE;
    END;
END;
$$;



-- Creating procedure to load data into CE_CUSTOMERS_SCD
CREATE OR REPLACE PROCEDURE BL_3NF.load_customers()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    --  Mark existing records as inactive ( so checking End Date and Is Active)
    UPDATE BL_3NF.CE_CUSTOMERS_SCD
    SET END_DT = CURRENT_DATE - INTERVAL '1 day', IS_ACTIVE = 'N'
    WHERE EXISTS (
        SELECT 1
        FROM (
            SELECT COALESCE(us.customername, 'n. a.') AS CUSTOMERNAME FROM sa_us_orders.src_us_order us
            UNION ALL
            SELECT COALESCE(nous.cust_name, 'n. a.') AS CUSTOMERNAME FROM sa_no_usa_orders.src_no_usa_order nous
        ) AS combined
        WHERE combined.CUSTOMERNAME = CE_CUSTOMERS_SCD.CUSTOMERNAME
          AND IS_ACTIVE = 'Y'
    );

    --Insert new records
    INSERT INTO BL_3NF.CE_CUSTOMERS_SCD (
        CUSTOMER_ID, CUSTOMERNAME, CONTACTFIRSTNAME, CONTACTLASTNAME, PHONE, CUSTOMER_SRC_ID, ADDRESS_ID, START_DT, END_DT, IS_ACTIVE, TA_INSERT_DT, SOURCE_SYSTEM, SOURCE_ENTITY
    )
    SELECT DISTINCT
        nextval('BL_3NF.customer_id_seq'),
        customername,
        contactfirstname,
        contactlastname,
        phone,
        customer_src_id,
        address_id,
        CURRENT_DATE,
        DATE '9999-12-31',
        'Y',
        CURRENT_DATE,
        source_system,
        source_entity
    FROM (
        SELECT COALESCE(us.customer_id::BIGINT, -1) AS customer_id, COALESCE(us.customername, 'n. a.') AS customername, COALESCE(us.contactfirstname, 'n. a.') AS contactfirstname, COALESCE(us.contactlastname, 'n. a.') AS contactlastname, COALESCE(us.phone, 'n. a.') AS phone, COALESCE(us.customer_id::VARCHAR, 'n. a.') AS customer_src_id, COALESCE(a.address_id, -1) AS address_id, 'sa_us_orders' AS source_system, 'src_us_order' AS source_entity
        FROM sa_us_orders.src_us_order us
        LEFT JOIN BL_3NF.CE_ADDRESSES a 
        ON us.addressline1 = a.addressline1
        AND a.source_system = 'sa_us_orders'
        AND a.source_entity = 'src_us_order'
        UNION ALL
        SELECT COALESCE(nous.customers_id::BIGINT, -1) AS customer_id, COALESCE(nous.cust_name, 'n. a.') AS customername, COALESCE(nous.cust_firstname, 'n. a.') AS contactfirstname, COALESCE(nous.cust_lastname, 'n. a.') AS contactlastname, COALESCE(nous.phone_number, 'n. a.') AS phone, COALESCE(nous.customers_id::VARCHAR, 'n. a.') AS customer_src_id, COALESCE(a.address_id, -1) AS address_id, 'sa_no_usa_orders' AS source_system, 'src_no_usa_order' AS source_entity
        FROM sa_no_usa_orders.src_no_usa_order nous
        LEFT JOIN BL_3NF.CE_ADDRESSES a 
        ON nous.address_line = a.addressline1
        AND a.source_system = 'sa_no_usa_orders'
        AND a.source_entity = 'src_no_usa_order'
    ) AS combined
    WHERE NOT EXISTS (
        SELECT 1 FROM BL_3NF.CE_CUSTOMERS_SCD 
        WHERE CUSTOMERNAME = combined.customername
          AND SOURCE_SYSTEM = combined.source_system
          AND SOURCE_ENTITY = combined.source_entity
          AND IS_ACTIVE = 'Y'
    );

    GET DIAGNOSTICS rows_affected = ROW_COUNT;
    PERFORM BL_CL.log_procedure_action('load_customers', rows_affected, 'Customers loaded successfully with SCD Type 2');
EXCEPTION
    WHEN unique_violation THEN
        -- Handle specific unique_violation
        PERFORM BL_CL.log_procedure_action('load_customers', 0, 'Unique constraint violation occurred');
        -- Implement retry logic or additional handling if needed
    WHEN OTHERS THEN
        PERFORM BL_CL.log_procedure_action('load_customers', 0, 'Error occurred during customers load', SQLERRM);
        RAISE;
END;
$$;





-- Creating procedure to load data into CE_ORDERS
CREATE OR REPLACE PROCEDURE BL_3NF.load_orders()
LANGUAGE plpgsql AS $$
DECLARE
    rows_affected INT := 0;
BEGIN
    BEGIN
        
        INSERT INTO BL_3NF.CE_ORDERS (
            ORDERNUMBER, QUANTITYORDERED, SALES, PAYMENT_METHOD_ID, DEALSIZE_ID, PRODUCT_ID, CUSTOMER_ID, EVENT_DT, TA_INSERT_DT, TA_UPDATE_DT, ORDER_SRC_ID, SOURCE_SYSTEM, SOURCE_ENTITY
        )
        SELECT DISTINCT
            COALESCE(us.ordernumber::BIGINT, nextval('BL_3NF.ordernumber_seq')) AS ordernumber,
            us.quantityordered::INTEGER AS quantityordered,
            us.sales::NUMERIC AS sales,
            pm.PAYMENT_METHOD_ID AS payment_method_id,
            ds.DEALSIZE_ID AS dealsize_id,
            p.PRODUCT_ID AS product_id,
            c.CUSTOMER_ID AS customer_id,
            us.orderdate::DATE AS event_dt,
            CURRENT_DATE AS TA_INSERT_DT,
            CURRENT_DATE AS TA_UPDATE_DT,
            us.ordernumber::VARCHAR AS order_src_id,
            'sa_us_orders' AS source_system,
            'src_us_order' AS source_entity
        FROM sa_us_orders.src_us_order us
        LEFT JOIN BL_3NF.CE_PAYMENT_METHODS pm 
        ON us.payment_method = pm.PAYMENT_METHOD
        AND pm.source_system = 'sa_us_orders'
        AND pm.source_entity = 'src_us_order'
        LEFT JOIN BL_3NF.CE_DEALSIZES ds 
        ON us.dealsize = ds.DEALSIZE
        AND ds.source_system = 'sa_us_orders'
        AND ds.source_entity = 'src_us_order'
        LEFT JOIN BL_3NF.CE_PRODUCTS p 
        ON us.productcode = p.PRODUCTCODE
        AND p.source_system = 'sa_us_orders'
        AND p.source_entity = 'src_us_order'
        LEFT JOIN BL_3NF.CE_CUSTOMERS_SCD c 
        ON us.customer_id::VARCHAR = c.CUSTOMER_ID::VARCHAR  
        AND c.source_system = 'sa_us_orders'
        AND c.source_entity = 'src_us_order'
        WHERE NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_ORDERS o 
            WHERE o.ORDERNUMBER = us.ordernumber::BIGINT
              AND o.SOURCE_SYSTEM = 'sa_us_orders'
              AND o.SOURCE_ENTITY = 'src_us_order'
        )
        UNION ALL
        SELECT DISTINCT
            COALESCE(nous.order_id::BIGINT, nextval('BL_3NF.ordernumber_seq')) AS ordernumber,
            nous.quantity::INTEGER AS quantityordered,
            nous.sales_amount::NUMERIC AS sales,
            pm.PAYMENT_METHOD_ID AS payment_method_id,
            ds.DEALSIZE_ID AS dealsize_id,
            p.PRODUCT_ID AS product_id,
            c.CUSTOMER_ID AS customer_id,
            nous.date_of_order::DATE AS event_dt,
            CURRENT_DATE AS TA_INSERT_DT,
            CURRENT_DATE AS TA_UPDATE_DT,
            nous.order_id::VARCHAR AS order_src_id,
            'sa_no_usa_orders' AS source_system,
            'src_no_usa_order' AS source_entity
        FROM sa_no_usa_orders.src_no_usa_order nous
        LEFT JOIN BL_3NF.CE_PAYMENT_METHODS pm 
        ON nous.payment_method = pm.PAYMENT_METHOD
        AND pm.source_system = 'sa_no_usa_orders'
        AND pm.source_entity = 'src_no_usa_order'
        LEFT JOIN BL_3NF.CE_DEALSIZES ds 
        ON nous.deal_size = ds.DEALSIZE
        AND ds.source_system = 'sa_no_usa_orders'
        AND ds.source_entity = 'src_no_usa_order'
        LEFT JOIN BL_3NF.CE_PRODUCTS p 
        ON nous.product_model = p.PRODUCTCODE
        AND p.source_system = 'sa_no_usa_orders'
        AND p.source_entity = 'src_no_usa_order'
        LEFT JOIN BL_3NF.CE_CUSTOMERS_SCD c 
        ON nous.customers_id::VARCHAR = c.CUSTOMER_ID::VARCHAR  
        AND c.source_system = 'sa_no_usa_orders'
        AND c.source_entity = 'src_no_usa_order'
        WHERE NOT EXISTS (
            SELECT 1 FROM BL_3NF.CE_ORDERS o 
            WHERE o.ORDERNUMBER = nous.order_id::BIGINT
              AND o.SOURCE_SYSTEM = 'sa_no_usa_orders'
              AND o.SOURCE_ENTITY = 'src_no_usa_order'
        );

        GET DIAGNOSTICS rows_affected = ROW_COUNT;
        PERFORM BL_CL.log_procedure_action('load_orders', rows_affected, 'Orders loaded successfully');
    EXCEPTION
        WHEN unique_violation THEN
            PERFORM BL_CL.log_procedure_action('load_orders', 0, 'Duplicate order number found and skipped');
        WHEN OTHERS THEN
            PERFORM BL_CL.log_procedure_action('load_orders', 0, 'Error occurred during orders load', SQLERRM);
            RAISE;
    END;
END;
$$;







CALL BL_3NF.load_dealsizes();
select * from bl_3nf.ce_dealsizes cd limit 10;
CALL BL_3NF.load_payment_methods();
select * from bl_3nf.ce_payment_methods cpm  limit 10;

CALL BL_3NF.load_products();
select * from bl_3nf.ce_products cp  limit 10;

CALL BL_3NF.load_countries();
select * from bl_3nf.ce_countries cc  limit 10;

CALL BL_3NF.load_states();
select * from bl_3nf.ce_states cs  limit 10;

CALL BL_3NF.load_cities();
select * from bl_3nf.ce_cities cc  limit 10;

CALL BL_3NF.load_addresses();
select * from bl_3nf.ce_addresses ca   limit 10;

CALL BL_3NF.load_customers();
select * from bl_3nf.ce_customers_scd ccs    limit 10;

CALL BL_3NF.load_orders();
select * from bl_3nf.ce_orders co    limit 10;


SELECT * FROM BL_CL.procedure_logs;

SELECT * FROM BL_3NF.CE_ORDERS;

