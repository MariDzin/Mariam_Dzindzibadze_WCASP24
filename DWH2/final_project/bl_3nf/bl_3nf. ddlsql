
-- creating schema
CREATE SCHEMA IF NOT EXISTS BL_3NF;

CREATE OR REPLACE PROCEDURE public.create_bl_3nf_and_tables_procedure()
LANGUAGE plpgsql
AS $$
BEGIN
    -- Create CE_DEALSIZES table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_DEALSIZES (
        DEALSIZE_ID BIGINT PRIMARY KEY,
        DEALSIZE VARCHAR(50) NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        DEALSIZE_SRC_ID VARCHAR(100) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL
    );

    -- Create CE_PAYMENT_METHODS table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_PAYMENT_METHODS (
        PAYMENT_METHOD_ID BIGINT PRIMARY KEY,
        PAYMENT_METHOD VARCHAR(50) NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        PAYMENT_SRC_ID VARCHAR(100) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL
    );

    -- Create CE_PRODUCTS table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_PRODUCTS (
        PRODUCT_ID BIGINT PRIMARY KEY,
        PRODUCTCODE VARCHAR(50) NOT NULL,
        PRODUCTLINE VARCHAR(100) NOT NULL,
        PRICEEACH DECIMAL(15,2) NOT NULL,
        MSRP DECIMAL(15,2) NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        PRODUCT_SRC_ID VARCHAR(50) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL
    );

    -- Create CE_COUNTRIES table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_COUNTRIES (
        COUNTRY_ID BIGINT PRIMARY KEY,
        COUNTRY_NAME VARCHAR(100) NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        COUNTRY_SRC_ID VARCHAR(50) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL,
        CONSTRAINT unique_countries UNIQUE (COUNTRY_NAME)
    );

    -- Create CE_STATES table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_STATES (
        STATE_ID BIGINT PRIMARY KEY,
        STATE_NAME VARCHAR(100) NOT NULL,
        COUNTRY_ID BIGINT NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        STATE_SRC_ID VARCHAR(50) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL,
        FOREIGN KEY (COUNTRY_ID) REFERENCES BL_3NF.CE_COUNTRIES(COUNTRY_ID)
    );

    -- Create CE_CITIES table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_CITIES (
        CITY_ID BIGINT PRIMARY KEY,
        CITY_NAME VARCHAR(100) NOT NULL,
        STATE_ID BIGINT NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        CITY_SRC_ID VARCHAR(50) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL,
        FOREIGN KEY (STATE_ID) REFERENCES BL_3NF.CE_STATES(STATE_ID)
    );

    -- Create CE_ADDRESSES table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_ADDRESSES (
        ADDRESS_ID BIGINT PRIMARY KEY,
        ADDRESSLINE1 VARCHAR(100) NOT NULL,
        CITY_ID BIGINT NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        ADDRESS_SRC_ID VARCHAR(50) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL,
        FOREIGN KEY (CITY_ID) REFERENCES BL_3NF.CE_CITIES(CITY_ID)
    );

    -- Create CE_CUSTOMERS_SCD table
CREATE TABLE IF NOT EXISTS BL_3NF.CE_CUSTOMERS_SCD (
    CUSTOMER_ID BIGINT primary key,
    CUSTOMERNAME VARCHAR(100) NOT NULL,
    CONTACTFIRSTNAME VARCHAR(100) NOT NULL,
    CONTACTLASTNAME VARCHAR(100) NOT NULL,
    PHONE VARCHAR(20) NOT NULL,
    ADDRESS_ID BIGINT NOT NULL,
    START_DT DATE NOT NULL,
    END_DT DATE NOT NULL,
    IS_ACTIVE VARCHAR(1) NOT NULL,
    TA_INSERT_DT DATE NOT NULL,
    CUSTOMER_SRC_ID VARCHAR(50) NOT NULL,
    SOURCE_SYSTEM VARCHAR(100) NOT NULL,
    SOURCE_ENTITY VARCHAR(100) NOT NULL,
    FOREIGN KEY (ADDRESS_ID) REFERENCES BL_3NF.CE_ADDRESSES(ADDRESS_ID)
   
);


    -- Create CE_ORDERS table
    CREATE TABLE IF NOT EXISTS BL_3NF.CE_ORDERS (
        ORDERNUMBER BIGINT PRIMARY KEY,
        QUANTITYORDERED INTEGER NOT NULL,
        SALES DECIMAL(15,2) NOT NULL,
        PAYMENT_METHOD_ID BIGINT NOT NULL,
        DEALSIZE_ID BIGINT NOT NULL,
        PRODUCT_ID BIGINT NOT NULL,
        CUSTOMER_ID BIGINT NOT NULL,
        EVENT_DT DATE NOT NULL,
        TA_INSERT_DT DATE NOT NULL,
        TA_UPDATE_DT DATE NOT NULL,
        ORDER_SRC_ID VARCHAR(100) NOT NULL,
        SOURCE_SYSTEM VARCHAR(100) NOT NULL,
        SOURCE_ENTITY VARCHAR(100) NOT NULL,
        FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES BL_3NF.CE_PAYMENT_METHODS(PAYMENT_METHOD_ID),
        FOREIGN KEY (DEALSIZE_ID) REFERENCES BL_3NF.CE_DEALSIZES(DEALSIZE_ID),
        FOREIGN KEY (PRODUCT_ID) REFERENCES BL_3NF.CE_PRODUCTS(PRODUCT_ID),
        FOREIGN KEY (CUSTOMER_ID) REFERENCES BL_3NF.CE_CUSTOMERS_SCD(CUSTOMER_ID)
    );

    RAISE NOTICE 'BL_3NF tables are created';

EXCEPTION
    WHEN OTHERS THEN
        -- Raise the exception to propagate the error
        RAISE NOTICE 'BL_3NF tables are not created: %', SQLERRM;
END;
$$;

-- Call the procedure to create the tables
CALL public.create_bl_3nf_and_tables_procedure();